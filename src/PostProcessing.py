#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Copyright (C) 2021 Aaron Gregory
This program is distributed under the terms of the GNU General Public License.

This file contains code to process the results.csv file generated by
performing statistical tests on the output of multiple QiPRNG instances.

QiPRNG is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

QiPRNG is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with QiPRNG. If not, see <http://www.gnu.org/licenses/>.
"""

import csv
import os
import numpy as np
import scipy as sp

def max_seed_completed(n_dims, n_bytes, results_filename):
    """
    Scans through a results file to find the highest
    seed value that's been tested on.

    Parameters
    ----------
    n_dims : int
        The dimension of the quantum system for the QiPRNG.
    n_bytes : int
        The number of bytes that was generated to test on.
    results_filename : string
        The name of the file to search for past results.

    Returns
    -------
    int
        The max seed that we've already generated results for.

    """
    # generation starts at max_seed + 1,
    # so if the file isn't there return -1
    if not os.path.isfile(results_filename):
        return -1;
    
    max_seed = -1
    with open(results_filename, 'r') as f:
        reader = csv.DictReader(f)
        # scan through the file line by line
        for row in reader:
            # and collect the maximum seed w ith matching n_dims and n_bytes
            if n_dims == int(row["n_dims"]) and n_bytes == int(row["n_bytes"]):
                max_seed = max(max_seed, int(row["seed"]))
    
    return max_seed


n_dims = 10
n_bytes = 1000000
results_filename = "../data/results.csv"

data = {}

with open(results_filename, 'r') as f:
    reader = csv.DictReader(f)
    for row in reader:
        if n_dims == int(row["n_dims"]) and n_bytes == int(row["n_bytes"]):
            for k in row.keys():
                if k not in data.keys():
                    data[k] = []
                data[k] += [float(row[k])]

# see Section 4.4 (Application of Multiple Tests) of NIST special publication 800-22r1a
pvals = {}
ws = {}
ns = {}
for k in data.keys():
    pvals[k] = sp.stats.kstest(data[k], "uniform").pvalue
    ws[k] = np.where(np.less(data[k], 0.000001))[0]
    ns[k] = len(ws[k])

